This package creates a python module called sciscipy.

It provides a link between python and Scilab by defining 3 functions:

- sciscipy.eval(sci_cmd)
- sciscipy.read(sci_var_name)
- sciscipy.write(sci_var_name, py_var_name)

To increase the level of enjoyment, a python module
called scilab is also provided. This package contains a
class 'Scilab' that can be used to issue any valid Scilab
command. Use it as follows:

>>> from scilab import Scilab
>>> sci = Scilab()
>>> (any_output, ...) = sci.any_func(param1, ...)

INSTALL
========

LINUX
------

$ ./setup.py build
$ sudo ./setup.py install

Debian/Ubuntu

$ ./setup.py build
$ sudo ./setup.py install --install-layout=deb

$ ./setup

WINDOWS
-------

can be compiled with visual studio express 2008

*Setting environment variables*

	scilab bin folder has to be in the path
	the "SCI" environment variable has to point toward the root scilab folder

	C:\Users\vinsz>echo %SCI%
	C:\Program Files\scilab-5.4.1\


*Copying the cfg file in etc/sciscipy*

	Create a subfolder sciscipy in the etc folder of the main scilab directory and copy the cfg file

	C:\Users\vinsz>cd "C:\Program Files\scilab-5.4.1\etc\sciscipy"

	C:\Program Files\scilab-5.4.1\etc\sciscipy>dir
	 Volume in drive C has no label.

	 Directory of C:\Program Files\scilab-5.4.1\etc\sciscipy

	06/04/2014  11:10    <DIR>          .
	06/04/2014  11:10    <DIR>          ..
	05/04/2010  23:00               121 scilab.cfg
				   1 File(s)            121 bytes
				   2 Dir(s)  405,658,169,344 bytes free



*building with visual c++ 2008*

	in the sciscipy folder type in a cmd.exe window:

	python setup.py build
	python setup.py install



	To clean the build:

	setup.py clean --all


RUN
===

LINUX
-----

the LD_LIBRARY_PATH environment variable must be set, for instance to

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/jvm/default-java/jre/lib/amd64/:/usr/lib/jvm/default-java//jre/lib/amd64/server/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/jvm/default-java/jre/lib/amd64/native_threads/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/scilab
export SCI=/usr/share/scilab

See http://help.scilab.org/docs/current/en_US/compile_and_run_call_scilab.html


Ubuntu
------

It is not possible to set LD_LIBRARY_PATH 
globally so you have to create a file sciscipy.conf in 
/etc/ld.so.conf.d:

$ cat /etc/ld.so.conf.d/sciscipy.conf 
/usr/lib/scilab
/usr/lib/jvm/default-java/jre/lib/i386/native_threads/
/usr/lib/jvm/default-java/jre/lib/i386/
/usr/lib/jvm/default-java/jre/lib/i386/server/

You also have to define the SCI environment variable in
/etc/environment :

$ cat /etc/environment
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/b
in:/usr/games"
SCI="/usr/share/scilab"


WINDOWS
-------



TESTS
=====

To run the tests, the command:
PYTHONPATH=build/lib.linux-x86_64-2.7/ python setup.py test
should be launched.
PYTHONPATH should be set if sciscipy is not installed in a system path.


Coding style
============

The coding style is done through the command:
astyle --pad-header --suffix=none --pad-oper --indent-col1-comments --indent-switches --indent=spaces=4 --add-brackets --formatted --style=bsd *.c
